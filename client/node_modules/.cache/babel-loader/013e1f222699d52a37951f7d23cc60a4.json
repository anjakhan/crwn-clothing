{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport UserActionTypes from '../user/user.types';\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["C:/Users/Anja/Documents/WebDev2020/ZeroToMastery/crwn-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","getUserCartRef","UserActionTypes","selectCurrentUser","clearCart","setCartFromFirebase","selectCartItems","CartActionTypes","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AAClC,QAAMT,GAAG,CAACK,SAAS,EAAV,CAAT;AACH;AAED,OAAO,UAAUK,oBAAV,GAAiC;AACpC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACG,iBAAD,CAAhC;;AACA,MAAIO,WAAJ,EAAiB;AACb,QAAI;AACA,YAAMC,OAAO,GAAG,MAAMV,cAAc,CAACS,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACH,KAJD,CAIE,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AACJ;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACtD,QAAMT,OAAO,GAAG,MAAMV,cAAc,CAACmB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACM,mBAAmB,CAACgB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACH;AAED,OAAO,UAAUW,gBAAV,GAA6B;AAChC,QAAM1B,UAAU,CAACI,eAAe,CAACuB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACH;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC5B,QAAM5B,UAAU,CAACI,eAAe,CAACyB,eAAjB,EAAkCT,qBAAlC,CAAhB;AACH;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC5B,QAAM9B,UAAU,CACZ,CACIS,eAAe,CAACsB,QADpB,EAEItB,eAAe,CAACuB,WAFpB,EAGIvB,eAAe,CAACwB,oBAHpB,CADY,EAMZtB,oBANY,CAAhB;AAQH;AAED,OAAO,UAAUuB,SAAV,GAAsB;AACzB,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC2B,gBAAD,CAAL,EAAyB3B,IAAI,CAAC+B,YAAD,CAA7B,EAA6C/B,IAAI,CAAC6B,YAAD,CAAjD,CAAD,CAAT;AACH","sourcesContent":["import { all, call, takeLatest, put, select } from 'redux-saga/effects';\r\n\r\nimport { getUserCartRef } from '../../firebase/firebase.utils';\r\nimport UserActionTypes from '../user/user.types';\r\nimport { selectCurrentUser } from '../user/user.selectors';\r\nimport { clearCart, setCartFromFirebase } from './cart.actions';\r\nimport { selectCartItems } from './cart.selectors';\r\nimport CartActionTypes from './cart.types';\r\n\r\nexport function* clearCartOnSignOut() {\r\n    yield put(clearCart());\r\n}\r\n\r\nexport function* updateCartInFirebase() {\r\n    const currentUser = yield select(selectCurrentUser);\r\n    if (currentUser) {\r\n        try {\r\n            const cartRef = yield getUserCartRef(currentUser.id);\r\n            const cartItems = yield select(selectCartItems);\r\n            yield cartRef.update({ cartItems });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport function* checkCartFromFirebase({ payload: user }) {\r\n    const cartRef = yield getUserCartRef(user.id);\r\n    const cartSnapshot = yield cartRef.get();\r\n    yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\r\n}\r\n\r\nexport function* onSignOutSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\r\n}\r\n\r\nexport function* onUserSignIn() {\r\n    yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\r\n}\r\n\r\nexport function* onCartChange() {\r\n    yield takeLatest(\r\n        [\r\n            CartActionTypes.ADD_ITEM,\r\n            CartActionTypes.REMOVE_ITEM,\r\n            CartActionTypes.CLEAR_ITEM_FROM_CART\r\n        ],\r\n        updateCartInFirebase\r\n    );\r\n}\r\n\r\nexport function* cartSagas() {\r\n    yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\r\n}"]},"metadata":{},"sourceType":"module"}